// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nillion/meta/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryMetadataRequest defines the request type for metadata
type QueryMetadataRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *QueryMetadataRequest) Reset()         { *m = QueryMetadataRequest{} }
func (m *QueryMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMetadataRequest) ProtoMessage()    {}
func (*QueryMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ace86812e3580b97, []int{0}
}
func (m *QueryMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetadataRequest.Merge(m, src)
}
func (m *QueryMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetadataRequest proto.InternalMessageInfo

func (m *QueryMetadataRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

// QueryMetadataResponse defines the response type for metadata
type QueryMetadataResponse struct {
	Metadata []byte `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *QueryMetadataResponse) Reset()         { *m = QueryMetadataResponse{} }
func (m *QueryMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMetadataResponse) ProtoMessage()    {}
func (*QueryMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ace86812e3580b97, []int{1}
}
func (m *QueryMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMetadataResponse.Merge(m, src)
}
func (m *QueryMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMetadataResponse proto.InternalMessageInfo

func (m *QueryMetadataResponse) GetMetadata() []byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// QueryAllMetadataRequest defines the request type for all metadata
type QueryAllMetadataRequest struct {
}

func (m *QueryAllMetadataRequest) Reset()         { *m = QueryAllMetadataRequest{} }
func (m *QueryAllMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMetadataRequest) ProtoMessage()    {}
func (*QueryAllMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ace86812e3580b97, []int{2}
}
func (m *QueryAllMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMetadataRequest.Merge(m, src)
}
func (m *QueryAllMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMetadataRequest proto.InternalMessageInfo

// QueryAllMetadataResponse defines the response type for all metadata
type QueryAllMetadataResponse struct {
	Metadata [][]byte `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *QueryAllMetadataResponse) Reset()         { *m = QueryAllMetadataResponse{} }
func (m *QueryAllMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMetadataResponse) ProtoMessage()    {}
func (*QueryAllMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ace86812e3580b97, []int{3}
}
func (m *QueryAllMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMetadataResponse.Merge(m, src)
}
func (m *QueryAllMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMetadataResponse proto.InternalMessageInfo

func (m *QueryAllMetadataResponse) GetMetadata() [][]byte {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryMetadataRequest)(nil), "nillion.meta.v1.QueryMetadataRequest")
	proto.RegisterType((*QueryMetadataResponse)(nil), "nillion.meta.v1.QueryMetadataResponse")
	proto.RegisterType((*QueryAllMetadataRequest)(nil), "nillion.meta.v1.QueryAllMetadataRequest")
	proto.RegisterType((*QueryAllMetadataResponse)(nil), "nillion.meta.v1.QueryAllMetadataResponse")
}

func init() { proto.RegisterFile("nillion/meta/v1/query.proto", fileDescriptor_ace86812e3580b97) }

var fileDescriptor_ace86812e3580b97 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x9b, 0x15, 0x65, 0x1d, 0x05, 0x31, 0xac, 0xb8, 0x9b, 0x95, 0x61, 0x09, 0xa8, 0xad,
	0x62, 0x86, 0xd8, 0xd2, 0xbb, 0xe2, 0xd5, 0x82, 0x3d, 0x7a, 0x29, 0x93, 0x74, 0x4c, 0x87, 0x26,
	0xf3, 0xa6, 0x99, 0x69, 0xb5, 0x88, 0x17, 0x4f, 0xde, 0x14, 0xfc, 0x18, 0x5e, 0xfc, 0x18, 0x1e,
	0x0b, 0x5e, 0x3c, 0x4a, 0x2b, 0xf8, 0x35, 0x64, 0xfe, 0xd8, 0x96, 0xa4, 0xa0, 0x97, 0x24, 0xf3,
	0xfe, 0xde, 0xe7, 0x79, 0x9f, 0x99, 0x0c, 0x3a, 0x17, 0x3c, 0xcf, 0x39, 0x08, 0x52, 0x30, 0x45,
	0xc9, 0x22, 0x26, 0xb3, 0x39, 0xab, 0x96, 0x51, 0x59, 0x81, 0x02, 0xff, 0x86, 0x83, 0x91, 0x86,
	0xd1, 0x22, 0x0e, 0x4e, 0x32, 0xc8, 0xc0, 0x30, 0xa2, 0xbf, 0x6c, 0x5b, 0x70, 0x27, 0x03, 0xc8,
	0x72, 0x46, 0x68, 0xc9, 0x09, 0x15, 0x02, 0x14, 0x55, 0x1c, 0x84, 0x74, 0x14, 0xa7, 0x20, 0x0b,
	0x90, 0x24, 0xa1, 0x92, 0x91, 0x45, 0x9c, 0x30, 0x45, 0x63, 0x92, 0x02, 0x17, 0x0d, 0x2e, 0xa6,
	0x5b, 0xae, 0x17, 0x8e, 0x9f, 0x59, 0x3e, 0xb2, 0x63, 0xed, 0xc2, 0xa1, 0x73, 0x27, 0x35, 0x99,
	0x6b, 0xe1, 0x83, 0x9b, 0xb4, 0xe0, 0x02, 0x88, 0x79, 0xda, 0x52, 0xd8, 0x47, 0x27, 0x2f, 0x74,
	0xc7, 0x73, 0xa6, 0xe8, 0x98, 0x2a, 0x3a, 0x64, 0xb3, 0x39, 0x93, 0xca, 0xc7, 0x08, 0xf1, 0x31,
	0x13, 0x8a, 0xbf, 0xe2, 0xac, 0x3a, 0xf5, 0x2e, 0xbc, 0xf6, 0xd5, 0xe1, 0x5e, 0x25, 0xec, 0xa2,
	0x5b, 0x35, 0x9d, 0x2c, 0x41, 0x48, 0xe6, 0x07, 0xe8, 0xb8, 0x70, 0x35, 0x23, 0xbb, 0x3e, 0xdc,
	0xae, 0xc3, 0x33, 0x74, 0xdb, 0x88, 0x9e, 0xe4, 0x79, 0x6d, 0x5e, 0xd8, 0x47, 0xa7, 0x4d, 0x74,
	0xd0, 0xf2, 0xd2, 0xbe, 0xe5, 0xe3, 0x2f, 0x47, 0xe8, 0xb2, 0x11, 0xfa, 0x1f, 0x3d, 0x74, 0xac,
	0xa5, 0xcf, 0xa8, 0xa2, 0xfe, 0xdd, 0xa8, 0xf6, 0x9f, 0xa2, 0x43, 0xbb, 0x0c, 0xee, 0xfd, 0xab,
	0xcd, 0x26, 0x08, 0x7b, 0x1f, 0x7e, 0x7f, 0x7d, 0xe0, 0xbd, 0xff, 0xfe, 0xeb, 0xf3, 0x51, 0xc7,
	0xbf, 0x4f, 0xea, 0x17, 0x44, 0xbf, 0x47, 0x5a, 0x40, 0xde, 0xee, 0x8e, 0xe8, 0x9d, 0x4e, 0x74,
	0xcd, 0xed, 0xc7, 0x84, 0x6a, 0x1f, 0x9e, 0xd6, 0x3c, 0x8d, 0xa0, 0xf3, 0x1f, 0x9d, 0x2e, 0xda,
	0xc3, 0x5d, 0xb4, 0x0b, 0x1f, 0x37, 0xa2, 0xd1, 0x3c, 0x1f, 0x6d, 0xe3, 0x3d, 0x1d, 0x7c, 0x5b,
	0x63, 0x6f, 0xb5, 0xc6, 0xde, 0xcf, 0x35, 0xf6, 0x3e, 0x6d, 0x70, 0x6b, 0xb5, 0xc1, 0xad, 0x1f,
	0x1b, 0xdc, 0x7a, 0xd9, 0xcb, 0xb8, 0x9a, 0xcc, 0x93, 0x28, 0x85, 0x82, 0x0c, 0xac, 0xc7, 0x80,
	0xa9, 0xd7, 0x50, 0x4d, 0xff, 0x5a, 0x3e, 0x4a, 0x27, 0x94, 0x0b, 0xf2, 0xc6, 0x5a, 0xab, 0x65,
	0xc9, 0x64, 0x72, 0xc5, 0x5c, 0xa2, 0xee, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x54, 0x38,
	0x30, 0x33, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Metadata queries for metadata
	MetaData(ctx context.Context, in *QueryMetadataRequest, opts ...grpc.CallOption) (*QueryMetadataResponse, error)
	AllMetaData(ctx context.Context, in *QueryAllMetadataRequest, opts ...grpc.CallOption) (*QueryAllMetadataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) MetaData(ctx context.Context, in *QueryMetadataRequest, opts ...grpc.CallOption) (*QueryMetadataResponse, error) {
	out := new(QueryMetadataResponse)
	err := c.cc.Invoke(ctx, "/nillion.meta.v1.Query/MetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllMetaData(ctx context.Context, in *QueryAllMetadataRequest, opts ...grpc.CallOption) (*QueryAllMetadataResponse, error) {
	out := new(QueryAllMetadataResponse)
	err := c.cc.Invoke(ctx, "/nillion.meta.v1.Query/AllMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Metadata queries for metadata
	MetaData(context.Context, *QueryMetadataRequest) (*QueryMetadataResponse, error)
	AllMetaData(context.Context, *QueryAllMetadataRequest) (*QueryAllMetadataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) MetaData(ctx context.Context, req *QueryMetadataRequest) (*QueryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaData not implemented")
}
func (*UnimplementedQueryServer) AllMetaData(ctx context.Context, req *QueryAllMetadataRequest) (*QueryAllMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllMetaData not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_MetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nillion.meta.v1.Query/MetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MetaData(ctx, req.(*QueryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nillion.meta.v1.Query/AllMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllMetaData(ctx, req.(*QueryAllMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nillion.meta.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MetaData",
			Handler:    _Query_MetaData_Handler,
		},
		{
			MethodName: "AllMetaData",
			Handler:    _Query_AllMetaData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nillion/meta/v1/query.proto",
}

func (m *QueryMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Metadata[iNdEx])
			copy(dAtA[i:], m.Metadata[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Metadata[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for _, b := range m.Metadata {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, make([]byte, postIndex-iNdEx))
			copy(m.Metadata[len(m.Metadata)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
